#import "templates/index.typ": *
#import "templates/utils.typ": *
#import "libs/tablex.typ": *

// Тут указываем только авторов [authors] и название работы [title] 
#show: index.with(authors: ("В.Д. Панков", ), title: [ОТЧЁТ О ПРАКТИКЕ])

// ch -- center heading
#ch("Введение")

Производственная практика проходила на предприятии ООО “ВАЛДАЙ РОБОТЫ”. Основной вид деятельности предприятия: «Производство промышленных роботов и робототехнических устройств»

Структура предприятия представлена на рисунке @org_structure.

#figure(
  image(ip("org_structure.png")),
  caption: "Структура организации"
) <org_structure>


Практика будет проходить в отделе разработки ПО, в подотделе разработки ПО высокого уровня.

Перед отделом стоят цели разработки автономной работы роботизированных устройств, а также разработки связанного с этим ПО, например, программ для операторов устройств.

Отдел не имеет фиксированных требований к конкретному программному обеспечению, что позволяет использовать наиболее подходящие инструменты для каждой задачи. В настоящий момент работа ведется с помощью следующих программ:

\1. Редактор исходного кода Visual Studio Code:

Описание: Популярный редактор с открытым исходным кодом, разработанный Microsoft.
Преимущества:

| Поддержка подсветки синтаксиса для различных языков программирования.

| Множество расширений, добавляющих дополнительные функции, такие как отладка, автодополнение кода и интеграция с системами контроля версий.

| Кроссплатформенность (доступен для Windows, macOS и Linux).
Использование: В отделе используется для написания кода на различных языках программирования, таких как C++, Python, JavaScript и Go.

\2. IDE Keil µVision:

Описание: Интегрированная среда разработки (IDE) для микроконтроллеров семейства ARM Cortex-M.
Преимущества:
| Встроенный компилятор, отладчик и симулятор.

| Поддержка различных отладочных инструментов, таких как J-Link и ULINK.

| Библиотека готовых к использованию программных модулей.

Использование: В отделе используется для разработки программного обеспечения для микроконтроллеров, используемых в различных проектах.

\3. Git:

Описание: Система контроля версий, позволяющая отслеживать изменения в файлах и коде.
Преимущества:

| Позволяет работать над проектами совместно с другими разработчиками.

| Помогает отслеживать историю изменений и откатывать к предыдущим версиям.

| Обеспечивает децентрализованное хранение кода.

Использование: В отделе используется для контроля версий исходного кода, документации и других файлов.
\4. Gitea:

Описание: Локальный Git-сервер, позволяющий хранить и управлять Git-репозиториями.
Преимущества:
| Позволяет работать с Git-репозиториями в локальной сети без доступа к интернету.

| Обеспечивает более высокий уровень безопасности и контроля над кодом.

| Прост в установке и использовании.

Использование: В отделе используется для хранения Git-репозиториев, доступ к которым требуется только сотрудникам отдела.

#pagebreak()

= Разработка технического задания

Разработанное техническое задание представлено в приложении А.

#pagebreak()

#ch("Заключение")


#pagebreak()

#ch("Список использованных источников")

#bibliography("bibliography.yml", title: none, full: true, style: "gost-r-705-2008-numeric")

#pagebreak()

#ch("Приложение А Разработка технического задания")

#counter(heading).update(0)

#show heading.where(level: 1): it => [ #it]


#fh("Введение")

Настоящее техническое задание распространяется на разработку кроссплатформенного приложения под названием «YaY»

Предложенное приложение - альтернатива приложению "Яндекс Музыка", включающее все функции оригинального приложения и решающее проблемы: отсутствие возможности совместного прослушивания музыки различными пользователями, отсутствие множества настроек, закрытость системы, путём распространение исходного кода для дальнейшей модернизации системы, обеспечение возможности установки дополнительных модулей (plug-in'ов) сторонних разработчиков.

Основная цель разрабатываемой программы — предоставить альтернативное мультиплатформенное открытое приложение по воспроизведению музыки из сервиса Яндекс Музыка, обеспечивающее единство функций в различных версиях.

#fh("Основание для разработки")

Основание для разработки является задание на димпломный проект по специальности 09.02.07 «Информационные системы и программирование» на тему «Разработка мобильного приложения «Музыкальный плеер»» по «МДК 01.03 Разработка мобильных приложений».

#fh("Назначение разработки")

#fhh("Функциональное назначение")

Создание альтернативного приложения для сервиса Яндекс Музыка, с возможностью прослушивания музыки различными пользователями, расширенными настройками, открытым исходным кодом для модернизации, и возможностью инсталляции дополнительных модулей от сторонних разработчиков. Это приложение предоставит мультиплатформенный и открытый доступ к функциям Яндекс Музыки, обеспечивая единство и удобство использования на различных устройствах.

#fhh("Эксплуатационное назначение")

Обеспечение пользователям доступа к сервису Яндекс Музыка через различные устройства (мобильные устройства, планшеты, компьютеры) с возможностью совместного прослушивания музыки, расширенными настройками, а также с возможностью установки дополнительных модулей от сторонних разработчиков для улучшения функциональности приложения. Это приложение предназначено для использования конечными пользователями с целью удобного и качественного доступа к музыкальному контенту.

#fh("Требование к информационной системе")
#fhh("Требование к функциональным характеристикам")

Функциональными характеристиками системы являются:
- авторизация через Яндекс;
- прослушивание музыки из библиотеки Яндекс Музыка;
- перемешивание треков в альбоме или плейлисте;
- цикличное прослушивание треков в альбоме или одно трека;
- функция "Моя волна", которая обеспечивает бесконечный поток музыки;
- возможность установить плагины от сторонних разработчиков;
- совместное прослушивание треков;
- переключение цветовой схемы приложения;
- защиты от необдуманных и случайных действий пользователя;
- совместное прослушивание треков двумя разными пользователями.
Входными данными являются:
- логин и пароль пользователя.
Выходными данными является:
- список музыкальных композиций;
- подборки музыкальных композиций под пользователей;

#fhh("Требование к надёжности")

| Приложение должно корректно работать на всех обозначенных операционных системах (Windows, IOS, MacOS, Linux, Android);

| Обработка некорректных входных данных, путём выдачи информационного сообщения пользователям;

| Корректная работа без подключения к интернету;

| Время восстановление системы после отказа не должно быть более 1 минуты;

Действия оператора в ходе отказа:
- Закрыть программу;
− Проверить подключение к интернету;
− Очистить кэш и данные приложения;
− Открыть программу заново.


#fhh("Условия эксплуатации")

Наличие у пользователя устройства, который выполняет минимальные требования, перечисленные в пункте 1.1.4.4 Требования к составу и параметрам технических средств.

1.1.4.3.1 Климатические условия эксплуатации

Требований к климатическим условиям эксплуатации не предъявляется.

1.1.4.3.2 Требования к видам обслуживания

Обслуживание не требуется.

1.1.4.3.3 Требования к численности и квалификации персонала

Персонал не требуется.

\

#fhh("Требования к составу и параметрам технических средств")

- Операционная система: Windows, macOS, Linux, Android, IOS;
- Минимальное кол-во оперативной памяти: 4 Гб;
- Минимальная видеокарта: Intel HD Graphics;
- Минимальный процессор: Intel Core i3 2.5GHz;
- Минимальный объем доступной памяти жёсткого диска: 100 Мб;
- Минимальное разрешение экрана: 1080x600;

#fhh("Требования к информационной и программной совместимости")

1.1.4.5.1 Требования к исходным кодам и языкам программирования
Исходные коды программы должны быть написаны на языке Kotlin.

1.1.4.5.2 Требования к программным средствам, используемым программой

Среда разработки приложения - IntelliJ IDEA Community Edition.

Библиотеки используемые приложением: Exposed, Compose Multiplatform, Kotlin Multiplatform.

Базы данных используемые приложением: PostgreSQL, SQLite.

Система должна работать на современных системах: Windows 10-11 с поддержкой DirectX 12, MacOS версии выше Catalina, Linux 6.0 и выше с визуальным окружением Gnome 40 и выше, Android 10 и выше, IOS 16 и выше.

#fhh("Требования к графическому дизайну")

Система должна выполнять следующие требования к графическому дизайну:
| Интуитивный адаптивный интерфейс под разные экраны и соотношения;

| В стиле Material You, с применением основных принципов и элементов этого дизайна.

| Возможность изменить тему интерфейса.

#fhh("Требования к программной документации")

Состав программной документации:
– "Yandex Music". Техническое задание (ГОСТ 19.201 78);
– "Yandex Music 3". Руководство системного программиста. (ГОСТ 19.503-79);

#fh("Стадии и этапы разработки")
- Составление Технического задания – 1 апреля 2024;
- Разработка приложения – 8 апреля 2024;

#fh("Порядок контроля и приёма работы")

Приём программы должен осуществляться руководителем дипломного проекта (Харитонова Г. Ф.).

